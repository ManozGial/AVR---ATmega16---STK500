
lab3_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001d4  00000268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000020c  00800062  00800062  0000026a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ab0  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000775  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a74  00000000  00000000  0000157d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  00001ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000fdce  00000000  00000000  00002118  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002d6  00000000  00000000  00011ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000121bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003589  00000000  00000000  00012234  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	55 c0       	rjmp	.+170    	; 0xd8 <__vector_11>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	3a c0       	rjmp	.+116    	; 0xaa <__vector_13>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ed       	ldi	r30, 0xD4	; 212
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	7b d0       	rcall	.+246    	; 0x17e <main>
  88:	a3 c0       	rjmp	.+326    	; 0x1d0 <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <board_init>:
#include <compiler.h>
#include <conf_board.h>


void board_init(void)
{
  8c:	08 95       	ret

0000008e <Transmit>:
			Sendmsg((char)i); //This func is used(easier),because 1 char per time is sent
			_delay_ms(500);
		}
		
	}
}
  8e:	9c 01       	movw	r18, r24
  90:	64 17       	cp	r22, r20
  92:	50 f4       	brcc	.+20     	; 0xa8 <Transmit+0x1a>
  94:	5d 9b       	sbis	0x0b, 5	; 11
  96:	fe cf       	rjmp	.-4      	; 0x94 <Transmit+0x6>
  98:	f9 01       	movw	r30, r18
  9a:	e6 0f       	add	r30, r22
  9c:	f1 1d       	adc	r31, r1
  9e:	90 81       	ld	r25, Z
  a0:	9c b9       	out	0x0c, r25	; 12
  a2:	6f 5f       	subi	r22, 0xFF	; 255
  a4:	46 13       	cpse	r20, r22
  a6:	f6 cf       	rjmp	.-20     	; 0x94 <Transmit+0x6>
  a8:	08 95       	ret

000000aa <__vector_13>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



ISR (USART_TXC_vect) { //  Interrupts for completed transmit data
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
		txReadPos++;
	}
	if(txReadPos >= BUFFER_SIZE)
		txReadPos = 0;
		*/
}
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <Check_Input>:

void Check_Input(char data[]){
	
	//while(data[rxReadPos] != CR[0]){
		//
		flag=0;
  be:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <flag>
		Space_num = 0;
  c2:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <Space_num>
		Number_num=0;
  c6:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <Number_num>
		//process
		Transmit(myrxbuffer,0,rxWritePos);
  ca:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__data_end>
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	8d e6       	ldi	r24, 0x6D	; 109
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	dc cf       	rjmp	.-72     	; 0x8e <Transmit>
  d6:	08 95       	ret

000000d8 <__vector_11>:

				
}


ISR (USART_RXC_vect) { //  Interrupts : a new element in UDR
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	2f 93       	push	r18
  e4:	3f 93       	push	r19
  e6:	4f 93       	push	r20
  e8:	5f 93       	push	r21
  ea:	6f 93       	push	r22
  ec:	7f 93       	push	r23
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
  f2:	af 93       	push	r26
  f4:	bf 93       	push	r27
  f6:	ef 93       	push	r30
  f8:	ff 93       	push	r31

	/////// ECHO DRIVER  //////////
	myrxbuffer[rxWritePos] = UDR ;
  fa:	8c b1       	in	r24, 0x0c	; 12
  fc:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__data_end>
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	e3 59       	subi	r30, 0x93	; 147
 104:	fe 4f       	sbci	r31, 0xFE	; 254
 106:	80 83       	st	Z, r24
	
	while(!(UCSRA & (1 << UDRE))) //if UDR is empty(no data transfer at the moment)
 108:	5d 9b       	sbis	0x0b, 5	; 11
 10a:	fe cf       	rjmp	.-4      	; 0x108 <__vector_11+0x30>
	;
	UDR = myrxbuffer[rxWritePos];
 10c:	8c b9       	out	0x0c, r24	; 12
	//////////////////////////////
	
	//Flag setting according to input control codes
	if(myrxbuffer[rxWritePos] == CR[0])
 10e:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__data_end>
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	e3 59       	subi	r30, 0x93	; 147
 116:	fe 4f       	sbci	r31, 0xFE	; 254
 118:	90 81       	ld	r25, Z
 11a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <CR>
 11e:	98 13       	cpse	r25, r24
 120:	03 c0       	rjmp	.+6      	; 0x128 <__vector_11+0x50>
		Check_Input(myrxbuffer);
 122:	8d e6       	ldi	r24, 0x6D	; 109
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	cb df       	rcall	.-106    	; 0xbe <Check_Input>
	

	rxWritePos++;
 128:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 12c:	8f 5f       	subi	r24, 0xFF	; 255
 12e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	
	
	if(rxWritePos >= BUFFER_SIZE )
		rxWritePos = 0;
		
}
 132:	ff 91       	pop	r31
 134:	ef 91       	pop	r30
 136:	bf 91       	pop	r27
 138:	af 91       	pop	r26
 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	7f 91       	pop	r23
 140:	6f 91       	pop	r22
 142:	5f 91       	pop	r21
 144:	4f 91       	pop	r20
 146:	3f 91       	pop	r19
 148:	2f 91       	pop	r18
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <init_serial>:



void init_serial(void){
	// By default URSEL == 0, so we can edit UBRRH regs.
	UBRRH = (unsigned char)(BRC >> 8); //UBRRH has 8 + 4 useful bits
 154:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char)BRC;
 156:	83 e3       	ldi	r24, 0x33	; 51
 158:	89 b9       	out	0x09, r24	; 9
	
	//UBRRH |= ( 1 << URSEL); // So we can edit UCRSC
	
	UCSRC &= ~(1 << UPM0); //UPM1 is cleared by default
 15a:	80 b5       	in	r24, 0x20	; 32
 15c:	8f 7e       	andi	r24, 0xEF	; 239
 15e:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1 << UPM1); //UPM1 is cleared by default
 160:	80 b5       	in	r24, 0x20	; 32
 162:	8f 7d       	andi	r24, 0xDF	; 223
 164:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1 << USBS); // 1 Stop bit
 166:	80 b5       	in	r24, 0x20	; 32
 168:	87 7f       	andi	r24, 0xF7	; 247
 16a:	80 bd       	out	0x20, r24	; 32

	UCSRC = ((1<<URSEL) | (1 << UCSZ0) | (1 << UCSZ1)) ;
 16c:	86 e8       	ldi	r24, 0x86	; 134
 16e:	80 bd       	out	0x20, r24	; 32
	UCSRB &= ~(1 << UCSZ2); //
 170:	52 98       	cbi	0x0a, 2	; 10

	UCSRB |= ((1 << RXEN) | (1 << TXEN)) ;
 172:	8a b1       	in	r24, 0x0a	; 10
 174:	88 61       	ori	r24, 0x18	; 24
 176:	8a b9       	out	0x0a, r24	; 10

	UCSRB |= (1 << TXCIE); //TXC interrupts enabled
 178:	56 9a       	sbi	0x0a, 6	; 10
	UCSRB |= (1 << RXCIE); //RXC interrupts enabled
 17a:	57 9a       	sbi	0x0a, 7	; 10
 17c:	08 95       	ret

0000017e <main>:
unsigned char USART_Receive(void);


int main (void)
{
	board_init();
 17e:	86 df       	rcall	.-244    	; 0x8c <board_init>
	init_serial();
 180:	e9 df       	rcall	.-46     	; 0x154 <init_serial>
 182:	78 94       	sei
	
	sei();
 184:	80 e2       	ldi	r24, 0x20	; 32
	
	//String copy
	strcpy(SPACE,"\x20");
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <flag>
 18c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <SPACE>
 190:	8d e0       	ldi	r24, 0x0D	; 13
	strcpy(CR,"\xD"); 
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <SPACE>
 198:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <CR>
 19c:	83 e1       	ldi	r24, 0x13	; 19
	strcpy(Pause_Code,"\x13"); // ^S	
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <Space_num>
 1a4:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <Pause_Code>
 1a8:	81 e1       	ldi	r24, 0x11	; 17
	strcpy(Resume_Code,"\x11"); //^Q
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	90 93 6e 02 	sts	0x026E, r25	; 0x80026e <__bss_end>
 1b0:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <Resume_Code>
 1b4:	83 e0       	ldi	r24, 0x03	; 3
	strcpy(Stop_Code,"\x03");	   // ^C
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <par1>
 1bc:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <Stop_Code>
 1c0:	8f ef       	ldi	r24, 0xFF	; 255

	//SpecialInputFlag will help at specifying
	//the state of the program according the last input code.
	SpecialInputFlag = -1;
 1c2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <SpecialInputFlag>
 1c6:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <rxReadPos>
	}


	*/
	//after the 'T' input has been received, we can start the normal program.
	rxReadPos=0;
 1ca:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	rxWritePos=0;
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <main+0x50>

000001d0 <_exit>:
 1d0:	f8 94       	cli

000001d2 <__stop_program>:
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <__stop_program>
